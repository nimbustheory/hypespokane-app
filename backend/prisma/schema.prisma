generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  username      String   @unique
  phone         String?
  dateOfBirth   DateTime?
  avatar        String?
  points        Int      @default(0)
  level         Int      @default(1)
  streak        Int      @default(0)
  lastCheckIn   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  checkIns      CheckIn[]
  reviews       Review[]
  favorites     Favorite[]
  achievements  UserAchievement[]
  deals         DealRedemption[]
  @@map("users")
}

model Venue {
  id            String   @id @default(cuid())
  name          String
  category      String
  address       String
  city          String   @default("Spokane")
  state         String   @default("WA")
  zipCode       String
  latitude      Float
  longitude     Float
  phone         String?
  website       String?
  description   String?
  hours         Json?
  priceRange    String?
  images        String[]
  isActive      Boolean  @default(true)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  checkIns      CheckIn[]
  reviews       Review[]
  favorites     Favorite[]
  deals         Deal[]
  @@map("venues")
}

model CheckIn {
  id          String   @id @default(cuid())
  userId      String
  venueId     String
  points      Int      @default(10)
  photo       String?
  note        String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  venue       Venue    @relation(fields: [venueId], references: [id])
  @@map("check_ins")
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  venueId     String
  rating      Int
  comment     String?
  photos      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  venue       Venue    @relation(fields: [venueId], references: [id])
  @@map("reviews")
}

model Favorite {
  id          String   @id @default(cuid())
  userId      String
  venueId     String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  venue       Venue    @relation(fields: [venueId], references: [id])
  @@unique([userId, venueId])
  @@map("favorites")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  points      Int
  category    String
  requirement Json
  createdAt   DateTime @default(now())
  users       UserAchievement[]
  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Deal {
  id          String   @id @default(cuid())
  venueId     String
  title       String
  description String
  discount    String
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  maxRedemptions Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  venue       Venue    @relation(fields: [venueId], references: [id])
  redemptions DealRedemption[]
  @@map("deals")
}

model DealRedemption {
  id          String   @id @default(cuid())
  userId      String
  dealId      String
  redeemedAt  DateTime @default(now())
  qrCode      String
  user        User     @relation(fields: [userId], references: [id])
  deal        Deal     @relation(fields: [dealId], references: [id])
  @@map("deal_redemptions")
}
